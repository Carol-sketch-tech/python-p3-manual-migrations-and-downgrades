Objectives 
    1. use an external libraru to simplify tastks from earlier ORM lessons.
    2. manage databse tables and schemas without ever writing SQL through Alembic.
    3. Use Alchemy to create, read, update and delete records in a SQL database.

INTRODUCTION.
WE  have learned generating migrations and makign changes in the schema using Alembic.
Alembis is a powerful tool that enables us to perform changes on a database schema such as :
    1. creatign and droping tables.
    2. creating and droppifn columns.
    3. Most indexing tasks.
    4. Renaming keys.

however there are certain tasks that almebic can help us with but cannot perform on it own
these tasks are :
    1. table naming 
    2. column name changes.
    3. Converting python data types that are not supported by the database.
in this lesson we will learn how to create manual migrations and how to roll bakc or downgrade migrations that were uncessesary or went awry.

BUILDING MIGRATIONS MANUALLY.
Alembci cannot detect changes to table names, so lets practice writing manual migrations by 
changing hte students table to scholars.
we can do this very easily is SQLAlchecmy thrugh changing th value od the __tablename__ class attribute in models.py file.
    __tablename__ = 'scholars'

next we generate a migration from the command line:
    alembic revision -m 'renaming the table from students to scholar'
next we navigate to the upgrade and downgrade funtionality in the versions newly genrated file.
         
         def upgrade() -> None:
    op.rename_table('students','scholars')


def downgrade() -> None:
    op.rename_table('students','scholars')
 
 this tells the alembic to change the name upon upgrade, but also change it back t upon downgrade pst this migrating.
 we can run this migration with the same command that we used for autogenerated migrations

 CHECKING MIGRATION LEVEL.
 before carryin gout any migrations it is always best to check which migrations have already been applied to the databse.
 you can fine the last migration applied by using the alembic current command from the command line.
 this will return teh Id of the current migration as well as informatuon on whether it is the most recent migration,mor head

 to check the current migrationor your in run the foloowing commnd:
    alembic current
this command will return the ID of the current migration, as well as information on whether it is the most recent migration or head
REMEMBER 
that migrations are only pushed to the database when upgrade is run.

DOWNGRADE MIGRATIONS.
To downgrade migrations we need to find the ID of the migration that we want to return to.
this would work if we choose to return to the original empty migration_but lets search for the original Students table instead.
for me that id is 6b9cb35ba46e .
it is very likely that your migratioNS id is different - you can find this ID in the name of the migrations file in 
migrations/versions/ or by parsing through the output from alembic history.

run the following command:
    alembic downgrade 6b9cb35ba46e